import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collections;
import java.util.LinkedList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;




public class Recommender 
{
	private LinkedList<Genera> favoriteGenera;
	private User subject;
	private LinkedList<recomendable> recomendations;
	
	public Recommender(User u)
	{
		subject=u;
		favoriteGenera=new LinkedList<Genera>();
		setRecomendations(new LinkedList<recomendable>());
		makeFavoriteGenera();
	}
	private int checkFavs(String s)
	{
		for(Genera g: favoriteGenera)
			if(g.genera.equalsIgnoreCase(s))
				return favoriteGenera.indexOf(g);
		return -1;
	}
	private void makeFavoriteGenera()
	{
		
		
		for(Game g: subject.getFavoriteGames())
			for(String s: g.getGenera())
			{
				int check=checkFavs(s);
				if(check>=0)
					++favoriteGenera.get(check).hits;
				else
					favoriteGenera.add(new Genera(s));
					
			}
		
		Collections.sort(favoriteGenera);
		Collections.reverse(favoriteGenera);
					
	}
	private LinkedList<Game> getRelatedTitles(Game G)
	{
		InputStream apiURL;
		LinkedList<Game> relatedTitles=new LinkedList<Game>();
		
		Document gamesDoc;
		String apiStem;
		NodeList focus;
		Element node;
		apiStem="?name="+G.getGameTitle();
		for(String pform: subject.getAcceptedPlatforms())
			apiStem=apiStem+"&platform="+pform;
		
		try
		{
			URL url=new URL("http://thegamesdb.net/api/GetGamesList.php?name="+apiStem);
			URLConnection connect=url.openConnection();
			connect.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB;    "
					+ "					 rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13 (.NET CLR 3.5.30729)");
			
			DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
			apiURL=connect.getInputStream();
			DocumentBuilder bob=factory.newDocumentBuilder();
			gamesDoc=bob.parse(apiURL);
			apiURL.close();
		
			
			focus=gamesDoc.getElementsByTagName("GameTitle");
			for(int i=0; i<focus.getLength(); i++)
			{	
				node=(Element)focus.item(i);
			
				if(node!=null)
				{
					System.out.println((node.getTextContent()));
					//System.out.println(new Game(Integer.parseInt(node.getTextContent())).getGameTitle());
					//relatedTitles.add(new Game(ID));
				}
					
			}

				
		}
		
		catch (Exception e) 
		{
			System.out.println(e.getLocalizedMessage());
		}
			
		return relatedTitles;
					
	}
	private LinkedList<recomendable> measure(LinkedList<Game> gl)	
	{
		LinkedList<recomendable> recos=new LinkedList<recomendable>();
		int w=1;
		
		for(Game g:gl)
		{
			w=1;
			for(String s1: g.getGenera())
			{
				for(Genera gen: favoriteGenera)
					if(gen.genera.equalsIgnoreCase(s1))
					{
						w+=gen.hits;
					}
			}
			recos.add(new recomendable(g, w*g.getRating()));
		}
		
		return recos;
		
	}
	public void recomend()
	{
		LinkedList<recomendable> possibles=new LinkedList<recomendable>();
		boolean isDupe=false;
		for(Game g: subject.getFavoriteGames())
		{
			for(recomendable r:measure(getRelatedTitles(g)))
			{
				isDupe=false;
				if(subject.checkList(subject.getFavoriteGames(), r.title))
						isDupe=true;
				else
				{
					for(recomendable dupe:	possibles)
					{
						if(dupe.title.compareTo(r.title)==0)
						{
							isDupe=true;
							possibles.get(possibles.indexOf(dupe)).weight=
								possibles.get(possibles.indexOf(dupe)).weight*2;
						}
			
					}
						
				}
				if(isDupe==false)
				{
					possibles.add(r);
				}
				
					
			}
		}
		Collections.sort(possibles);
		Collections.reverse(possibles);
		recomendations=possibles;
	}	
	public LinkedList<Genera> getFG()
	{
		return favoriteGenera;
	}
	
	
	public LinkedList<recomendable> getRecomendations() {
		return recomendations;
	}
	public void setRecomendations(LinkedList<recomendable> recomendations) {
		this.recomendations = recomendations;
	}


	private class Genera implements Comparable<Genera>
	{
		protected String genera;
		protected int hits;
		
		public Genera(String g)
		{
			genera=g;
			hits=1;
		}

		@Override
		public int compareTo(Genera o)
		{
				
				return this.hits-o.hits;

		}
		
		public String toString()
		{
			Integer i=hits;
			return genera+"\t"+i.toString();
		}
	}
	private class recomendable implements Comparable<recomendable>
	{
		protected Game title;
		protected int weight;
		public recomendable(Game G, int i)
		{
			title=G;
			weight=i;
					
		}
		@Override
		public int compareTo(recomendable arg0) {
			return this.weight-arg0.weight;
		}
		
		
	}
	public String toString()
	{
		String ms="\n";
		for(recomendable r: recomendations)
		{
			ms=ms+r.title.getGameTitle()+"\t"+r.weight+"\n";
		}
		return ms;
	}
		

}
